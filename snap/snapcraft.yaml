name: deconz-webserver
base: core24
version: '0.1'
summary: Single-line elevator pitch for your amazing snap
description: |
  This is my-snap's description. You have a paragraph or two to tell the
  most important story about your snap. Keep it under 100 words though,
  we live in tweetspace and your description wants to look good in the snap
  store.

grade: devel
confinement: strict

platforms:
  amd64:
    build-on: [amd64]
    build-for: [amd64]

  armhf:
    build-on: [armhf]
    build-for: [armhf]

apps:
  deconz-webserver:
    command: backend/command.sh
    daemon: simple
    restart-condition: always
    plugs:
      - network-bind

  # my-electron-app:
  #   command: electron/command.sh
  #   extensions: [gnome] 
  #   plugs:
  #     - browser-support
  #     - network-bind
  #     - home
  #     - unity7
  #     - opengl
  #     - bluez

parts:
  frontend:
    plugin: nil
    source: .
    build-snaps:
      - node/22/stable
    override-build: |
      export CYPRESS_INSTALL_BINARY=0  # armhf does have an issue with cypress. So we can prevent it from being installed ..

      npm run setup:frontend
      npm run build:frontend

      # Install frontend build to the part's install dir
      mkdir -p $SNAPCRAFT_PART_INSTALL/frontend/dist
      cp -r frontend/dist/* $SNAPCRAFT_PART_INSTALL/frontend/dist/

    stage:
    - frontend/dist


  backend:
    plugin: npm
    source: .
    npm-include-node: true
    npm-node-version: "22.19.0"
    after: [frontend]
    build-snaps:
      - node/22/stable
    override-build: |
      # export PATH=/snap/bin:$PATH

      # Install and build
      npm run setup:backend

      # Copy output to $SNAPCRAFT_PART_INSTALL
      mkdir -p $SNAPCRAFT_PART_INSTALL/backend/public
      cp -r ./backend/* $SNAPCRAFT_PART_INSTALL/backend/
      cp -r $SNAPCRAFT_STAGE/frontend/dist/* $SNAPCRAFT_PART_INSTALL/backend/public

      # In order to have node binary inside installed snap
      craftctl default


  # electron-app:
  #   plugin: nil
  #   source: .
  #   after: [frontend]
  #   build-snaps:
  #     - node/22/stable
  #   override-build: |
  #     # export PATH=/snap/bin:$PATH

  #     # Accoring to package.json (electron build section) the electron app tries to get frontend
  #     # from frontend/dist folder (relatively to where package.json lies)
  #     mkdir -p $CRAFT_PART_BUILD/frontend/dist
  #     cp -r $SNAPCRAFT_STAGE/frontend/dist/* $CRAFT_PART_BUILD/frontend/dist

  #     # Install and build
  #     npm install
  #     npm run build:electron

  #     # Copy output to $SNAPCRAFT_PART_INSTALL
  #     mkdir $SNAPCRAFT_PART_INSTALL/electron
  #     cp -r ./dist/linux-unpacked/* $SNAPCRAFT_PART_INSTALL/electron/

  #     # Copy the shellscripts
  #     cp -r ./electron/command-shellscripts/* $SNAPCRAFT_PART_INSTALL/electron/